<?xml version="1.0" encoding="utf-8"?>
<view:AbstractReferenceDataImportView 
		 xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:component="org.openforis.collect.ui.component.*"
		 xmlns:datagrid="org.openforis.collect.ui.component.datagrid.*"
		 xmlns:view="org.openforis.collect.ui.view.*"
		 skinClass="org.openforis.collect.ui.skin.CSVDataImportViewSkin"
		 creationComplete="creationCompleteHandler(event)" 
		 >

	<fx:Script>
		<![CDATA[
			import mx.controls.Tree;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.Application;
			import org.openforis.collect.i18n.Message;
			import org.openforis.collect.manager.referencedataimport.ParsingError$ErrorType;
			import org.openforis.collect.manager.referencedataimport.proxy.ParsingErrorProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.model.CollectRecord$Step;
			import org.openforis.collect.presenter.CSVDataImportPresenter;
			
			import spark.components.CheckBox;
			import spark.components.DropDownList;
			import spark.components.RadioButtonGroup;
			import spark.components.gridClasses.GridColumn;
			
			public static const UPDATE_EXISTING_RECORDS_TYPE:String = "updateExistingRecords";
			public static const INSERT_NEW_RECORDS_TYPE:String = "insertNewRecords";
			public static const IMPORT_MULTIPLE_FILES_TYPE:String = "importMultipleFiles";
			
			public static const STATE_UPDATE_EXISTING_RECORDS:String = "updateExistingRecords";
			public static const STATE_INSERT_NEW_RECORDS:String = "insertNewRecords";
			public static const STATE_IMPORT_MULTIPLE_FILES:String = "importMultipleFiles";
			
			[SkinPart(required="true", type="mx.controls.Tree")]
			public var entitySelectionTree:Tree;
			
			[SkinPart(required="true", type="spark.compoenents.RadioButtonGroup")]
			public var importType:RadioButtonGroup;
			
			[SkinPart(required="true", type="spark.compoenents.DropDownList")]
			public var formVersionDropDownList:DropDownList;
			
			[SkinPart(required="true", type="spark.compoenents.DropDownList")]
			public var stepDropDownList:DropDownList;
			
			[SkinPart(required="true", type="spark.compoenents.CheckBox")]
			public var transactionalCheckBox:CheckBox;
			
			[SkinPart(required="true", type="spark.compoenents.CheckBox")]
			public var validateRecordsCheckBox:CheckBox;
			
			[SkinPart(required="true", type="spark.compoenents.CheckBox")]
			public var deleteExistingEntitiesCheckBox:CheckBox;
			
			private var _presenter:CSVDataImportPresenter;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				_presenter = new CSVDataImportPresenter(this);
				_presenter.init();
			}
			
			override public function errorMessageLabelFunction(item:ParsingErrorProxy, gridColumn:GridColumn):String {
				switch ( item.errorType ) {
					case ParsingError$ErrorType.WRONG_COLUMN_NAME:
						return "";
					default:
						return super.errorMessageLabelFunction(item, gridColumn);	
				}
			}
			
			public function stepLabelFunction(step:Object):String {
				switch(step) {
					case CollectRecord$Step.ENTRY:
						return Message.get("edit.dataEntry");
					case CollectRecord$Step.CLEANSING:
						return Message.get("edit.dataCleansing");
					case CollectRecord$Step.ANALYSIS:
						return Message.get("edit.dataAnalysis");
					default:
						return step.label;
				} 
			}
			
			public function formVersionLabelFunction(version:ModelVersionProxy):String {
				return version.getLabelText(Application.localeLanguageCode);
			}
			
		]]>
	</fx:Script>
	
	<view:states>
		<s:State name="default" enterState="invalidateSkinState()" />
		<s:State name="insertNewRecords" enterState="invalidateSkinState()" />
		<s:State name="updateExistingRecords" enterState="invalidateSkinState()" />
		<s:State name="importMultipleFiles" enterState="invalidateSkinState()" />
		<s:State name="loading" enterState="invalidateSkinState()" />
		<s:State name="uploading" enterState="invalidateSkinState()" />
		<s:State name="importing" enterState="invalidateSkinState()" />
		<s:State name="error" enterState="invalidateSkinState()" />
	</view:states>
	
</view:AbstractReferenceDataImportView>
